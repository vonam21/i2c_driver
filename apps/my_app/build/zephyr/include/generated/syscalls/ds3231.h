/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_DS3231_H
#define Z_INCLUDE_SYSCALLS_DS3231_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_get_time(const struct device * device_tree, unsigned char * data_receive);

__pinned_func
static inline void get_time(const struct device * device_tree, unsigned char * data_receive)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = device_tree };
		union { uintptr_t x; unsigned char * val; } parm1 = { .val = data_receive };
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_GET_TIME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_get_time(device_tree, data_receive);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define get_time(device_tree, data_receive) do { 	sys_port_trace_syscall_enter(K_SYSCALL_GET_TIME, get_time, device_tree, data_receive); 	get_time(device_tree, data_receive); 	sys_port_trace_syscall_exit(K_SYSCALL_GET_TIME, get_time, device_tree, data_receive); } while(false)
#endif
#endif


extern void z_impl_set_time(const struct device * device_tree, unsigned char * data_send);

__pinned_func
static inline void set_time(const struct device * device_tree, unsigned char * data_send)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = device_tree };
		union { uintptr_t x; unsigned char * val; } parm1 = { .val = data_send };
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SET_TIME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_set_time(device_tree, data_send);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define set_time(device_tree, data_send) do { 	sys_port_trace_syscall_enter(K_SYSCALL_SET_TIME, set_time, device_tree, data_send); 	set_time(device_tree, data_send); 	sys_port_trace_syscall_exit(K_SYSCALL_SET_TIME, set_time, device_tree, data_send); } while(false)
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
